#!/bin/bash

set -Eeuo pipefail

GOCD_ENDPOINT="http://gocd:8153/go"

command="$1"
case "${command}" in
  create_passwd)
    echo -n secret | htpasswd -i -B -c passwd admin
    ;;
  wait_online)
    for i in {1..200}; do
      HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
        "${GOCD_ENDPOINT}/api/v1/health" --insecure \
        -H 'Accept: application/vnd.go.cd.v1+json' \
        -H 'Content-Type: application/json' \
        )
      HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
      if [ ! $HTTP_STATUS -eq 200  ]; then
        echo "GoCD is not up yet" >&2
        sleep 1
        continue
      fi
      HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
      echo $HTTP_BODY
      exit 0
    done
    ;;
  configure_auth)
    HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
      "${GOCD_ENDPOINT}/api/admin/security/auth_configs" \
      -H 'Accept: application/vnd.go.cd.v1+json' \
      -H 'Content-Type: application/json' \
      -X POST -d '{
        "id": "passwd",
        "plugin_id": "cd.go.authentication.passwordfile",
        "properties": [
          {
            "key": "PasswordFilePath",
            "value": "/godata/passwd"
          }
        ]
      }')
    HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    if [ ! $HTTP_STATUS -eq 200  ]; then
      echo "Failed to setup password authentication" >&2
      exit 5
    fi
    echo "GoCD is now configured to authenticate with passwd file"
    ;;
esac
